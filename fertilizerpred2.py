# -*- coding: utf-8 -*-
"""fertilizerpred2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Mn9Y3_CtHp6tdThnSuzEuqN55hjO59wD
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from tensorflow import keras
from keras.models import Sequential
from keras.layers import Dense
import tensorflow as tf
import warnings
warnings.filterwarnings("ignore")

# Load the dataset
data = pd.read_csv('/content/Fertilizer Prediction dataset csv.csv')

max_nitrogen = data['Nitrogen'].max()
print(max_nitrogen)

min_nitrogen = data['Nitrogen'].min()
print(min_nitrogen)

max_temp=data['Temparature'].max()
print(max_temp)

min_temp=data['Temparature'].min()
print(min_temp)

max_moisture=data['Moisture'].max()
print(max_moisture)

min_moisture=data['Moisture'].min()
print(min_moisture)

max_potassium=data['Potassium'].max()
print(max_potassium)

min_potassium=data['Potassium'].min()
print(min_potassium)

max_phosphorous=data['Phosphorous'].max()
print(max_phosphorous)

min_phosphorous=data['Phosphorous'].min()
print(min_phosphorous)

data.head()

data.describe()

#converting the datatype of Soil Type from string to float
data['Soil Type'].unique()
data['Soil Type']=data['Soil Type'].replace({'Sandy':0,'Loamy':1,'Black':2,'Red':3,'Clayey':4})
data['Soil Type']=pd.to_numeric(data['Soil Type'])
data['Soil Type']

data['Crop Type'].unique()
data['Crop Type']=data['Crop Type'].replace({'Maize':0,'Sugarcane':1,'Cotton':2,'Tobacco':3,'Paddy':4,'Barley':5,'Wheat':6,'Millets':7,'Oil seeds':8,'Pulses':9,'Ground Nuts':10})
data['Crop Type']=pd.to_numeric(data['Crop Type'])
data['Crop Type']

data['Fertilizer Name'].unique()
data['Fertilizer Name']=data['Fertilizer Name'].replace({'Urea':0,'DAP':1,'14-35-14':2,'28-28':3,'17-17-17':4,'20-20':5,'10-26-26':6})
data['Fertilizer Name']=pd.to_numeric(data['Crop Type'])
data['Fertilizer Name']
dc=['Urea','DAP','14-35-14','28-28','17-17-17','20-20','10-26-26']

# Extract the input features and target variable
X = data.drop('Fertilizer Name',axis=1)
y = data['Fertilizer Name']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = MinMaxScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Create a sequential model
model = Sequential()

# Add the input layer and hidden layers
model.add(Dense(64, activation='relu', input_shape=(X_train_scaled.shape[1],)))
model.add(Dense(32, activation='relu'))

# Add the output layer
model.add(Dense(1, activation='linear'))

# Compile the model
model.compile(loss='mean_squared_error', optimizer='adam')

model.fit(X_train_scaled, y_train, epochs=100, batch_size=32, verbose=1)

# Make predictions on new data
#79.0, 48.0, 78.0, 1.0, 1.0, 12.0, 0.0,Â 36.0
#79.5, 48.2, 78.1, 1.0, 1.0, 12.2, 45.3, 36.1
new_data = np.array([[79.5,48.2,78.1,1.0,1.0,12.2,45.3,36.1]])
new_data_scaled = scaler.transform(new_data)

prediction = model.predict(new_data_scaled)
print(prediction)
print('Fertilizer Name', dc[int(prediction[0][0])])

# Evaluate the model on the test data
accuracy = model.evaluate(X_test, y_test)
# Print the accuracy
print("Accuracy:", accuracy)

print(new_data)
print(new_data_scaled)

model.save('research_recom.h5')

model = tf.keras.models.load_model('research_recom.h5')

converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model = converter.convert()

with open('Fertilizerconverted_model.tflite', 'wb') as f:
    f.write(tflite_model)